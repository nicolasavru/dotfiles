## 41_functions

function mkcd() { mkdir "$1" && cd "$1"; }

function calc() { echo "$*" | bc; }

function hex2dec { awk 'BEGIN { printf "%d\n",0x$1}'; }
function dec2hex { awk 'BEGIN { printf "%x\n",$1}'; }

function dsync () { rsync -lprt --progress --stats --delete "$1/" "$2/" }

function define () {
    dictionary="english"
    [[ "$2" != "" ]] && dictionary=$2
    echo -e "DEFINE $dictionary $1\nQUIT" | netcat dict.org 2628
}

# rfc2396 url encoding (by Bart Schaefer)
function urlencode() {
        setopt localoptions extendedglob
        input=( ${(s::)1} )
        print ${(j::)input/(#b)([^A-Za-z0-9_.--version\'\(\)-])/%$(([##16]#match))}
}

# provide useful information on globbing
glob-help() {
echo -e "
/      directories
.      plain files
@      symbolic links
=      sockets
p      named pipes (FIFOs)
*      executable plain files (0100)
%      device files (character or block special)
%b     block special files
%c     character special files
r      owner-readable files (0400)
w      owner-writable files (0200)
x      owner-executable files (0100)
A      group-readable files (0040)
I      group-writable files (0020)
E      group-executable files (0010)
R      world-readable files (0004)
W      world-writable files (0002)
X      world-executable files (0001)
s      setuid files (04000)
S      setgid files (02000)
t      files with the sticky bit (01000)
print *(m-1)          # List files modified today.
print *(a1)           # List files accessed one day ago.
print *(@)            # Print links.
print *(Lk+50)        # List files > 50 Kilobytes.
print *(Lk-50)        # List files < 50 Kilobytes.
print **/*.c          # Recursively list all c files.
print **/*.c~file.c   # List all c files, except file.c
print (foo|bar).*     # List files whos names start foo or bar.
print *~*.*           # 
chmod 644 *(.^x)      # make all non-executable files publically readable
print -l *(.c|.h)     # List all c and header files on their own lines. 
print **/*(g:users:)  # Recursively list files with the group 'users'
echo /proc/*/cwd(:h:t:s/self//) # Analogue of >ps ax | awk '{print $1}'<"
}

# TERMS SETTINGS
function title {
    print -nR $'\033]0;'$*$'\a'
}

function precmd {
  title zsh "$PWD"
}
  
function preexec {
  emulate -L zsh
  local -a cmd; cmd=(${(z)1})
  title $cmd[1]:t "$cmd[2,-1]"
}

